 #include "output_manager.h"


OutputManager::OutputManager(int cycle)
:
cycle_(cycle)
{
  // Do we have to put anything here into the constructor?
}

void OutputManager::scalar_output(VectorXd &x, const string &name)
{


  string s_1 = "output/";
  string s_2 = "-";
  string s_3 = ".vtk";
  stringstream ss_filename;
  ss_filename << s_1 << name << s_2 << cycle_ << s_3;
  string s_filename = ss_filename.str();

  // Create a vtk file for output
  // ofstream vtkstream("output/u.vtk");
  ofstream vtkstream(s_filename);

  // Follow the format of vtk files and write our mesh and solution into this file.
  vtkstream << "# vtk DataFile Version 3.0" << endl;
  vtkstream << "#This file was generated by the FVM solver (Authors: T. Xue, Y. Tao and J. Wu)" << endl;
  vtkstream << "ASCII" << endl;
  vtkstream << "DATASET UNSTRUCTURED_GRID" << endl << endl;
  vtkstream << "POINTS " << VERTICES_PER_CELL*CELL_NUMBER << " double" << endl;
  for (int id = 0; id < CELL_NUMBER; ++id)
  {
    Cell cell(id);
    for (int v = 0; v < VERTICES_PER_CELL; ++v)
    {
      vtkstream << cell.vertices_[v][0] << " "
      << cell.vertices_[v][1] << " " << "0" << endl;
    }
  }
  vtkstream << endl << "CELLS " << CELL_NUMBER << " " << 5*CELL_NUMBER << endl;
  for (int id = 0; id < CELL_NUMBER; ++id)
  {
    vtkstream << 4 << "\t" << 0 + 4*id << "\t"
    << 1 + 4*id << "\t" << 3 + 4*id << "\t"
    << 2 + 4*id << endl;
  }
  vtkstream << endl << "CELL_TYPES " << CELL_NUMBER << endl;
  for (int id = 0; id < CELL_NUMBER; ++id)
  {
    vtkstream << " " << CELL_TYPE;
  }
  vtkstream << endl << "POINT_DATA" << " " << VERTICES_PER_CELL*CELL_NUMBER << endl;
  vtkstream << "SCALARS u double 1" << endl; 
  vtkstream << "LOOKUP_TABLE default" << endl;
  for (int id = 0; id < CELL_NUMBER; ++id)
  {
    for (int i = 0; i < VERTICES_PER_LINE; ++i)
      { 
        for (int j = 0; j < VERTICES_PER_LINE; ++j)
        {
          vtkstream << x[id] << " ";
        }
      }
  }
 


}



void OutputManager::vector_output()
{
  // To be implemented
}